name: Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: heaven_dolls_integration_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Chrome for Selenium
        uses: browser-actions/setup-chrome@latest

      - name: Setup Chrome Driver
        uses: nanasess/setup-chromedriver@v2

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          DATABASE_URL=postgresql://test_user:test_password@localhost:5433/heaven_dolls_integration_test
          CMS_URL=http://localhost:1338
          WEB_URL=http://localhost:3001
          AUTOMATION_URL=http://localhost:3002
          TRACKING_URL=http://localhost:3003
          REDIS_URL=redis://localhost:6380
          JWT_SECRET=integration_test_jwt_secret
          ADMIN_JWT_SECRET=integration_test_admin_jwt_secret
          APP_KEYS=integration_test_app_key_1,integration_test_app_key_2
          API_TOKEN_SALT=integration_test_api_token_salt
          TRANSFER_TOKEN_SALT=integration_test_transfer_token_salt
          WEBHOOK_SECRET=test-webhook-secret
          GOOGLE_SHEETS_CLIENT_EMAIL=test@example.com
          GOOGLE_SHEETS_PRIVATE_KEY=test_private_key
          GOOGLE_SHEETS_SPREADSHEET_ID=test_spreadsheet_id
          EOF

      - name: Setup test Google Sheets credentials
        run: |
          mkdir -p tests/integration
          cat > tests/integration/test-service-account.json << EOF
          {
            "type": "service_account",
            "project_id": "test-project",
            "private_key_id": "test-key-id",
            "private_key": "-----BEGIN PRIVATE KEY-----\nTEST_PRIVATE_KEY\n-----END PRIVATE KEY-----\n",
            "client_email": "test@test-project.iam.gserviceaccount.com",
            "client_id": "123456789",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token"
          }
          EOF

      - name: Build applications
        run: npm run build

      - name: Create Docker network
        run: docker network create heaven-dolls-integration || true

      - name: Build Docker images
        run: |
          docker build -f apps/cms/Dockerfile -t heaven-dolls-cms:test apps/cms
          docker build -f apps/web/Dockerfile.integration -t heaven-dolls-web:test apps/web
          docker build -f apps/automation/Dockerfile.integration -t heaven-dolls-automation:test apps/automation
          docker build -f apps/tracking/Dockerfile.integration -t heaven-dolls-tracking:test apps/tracking

      - name: Run database migrations
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/heaven_dolls_integration_test

      - name: Start integration test services
        run: |
          docker-compose -f docker-compose.integration.yml up -d --wait
          sleep 30  # Additional wait for services to stabilize

      - name: Wait for services health check
        run: |
          timeout 300 bash -c '
            until curl -f http://localhost:1338/_health; do
              echo "Waiting for CMS..."
              sleep 5
            done
          '
          timeout 300 bash -c '
            until curl -f http://localhost:3001/api/health; do
              echo "Waiting for Web..."
              sleep 5
            done
          '
          timeout 300 bash -c '
            until curl -f http://localhost:3003/health; do
              echo "Waiting for Tracking..."
              sleep 5
            done
          '

      - name: Run integration tests
        run: |
          cd tests/integration
          npm test -- --coverage --maxWorkers=1 --forceExit
        env:
          CI: true
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/heaven_dolls_integration_test
          CMS_URL: http://localhost:1338
          WEB_URL: http://localhost:3001
          AUTOMATION_URL: http://localhost:3002
          TRACKING_URL: http://localhost:3003

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            tests/integration/test-results/
            tests/integration/coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: tests/integration/coverage/lcov.info
          flags: integration
          name: integration-tests

      - name: Collect Docker logs
        if: failure()
        run: |
          mkdir -p logs
          docker-compose -f docker-compose.integration.yml logs --no-color > logs/docker-compose.log
          docker logs heaven-dolls-integration-cms-integration-1 > logs/cms.log 2>&1 || true
          docker logs heaven-dolls-integration-web-integration-1 > logs/web.log 2>&1 || true
          docker logs heaven-dolls-integration-tracking-integration-1 > logs/tracking.log 2>&1 || true
          docker logs heaven-dolls-integration-automation-integration-1 > logs/automation.log 2>&1 || true

      - name: Upload Docker logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: docker-logs
          path: logs/

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.integration.yml down -v
          docker system prune -f

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          cd tests/integration
          npm test -- --testNamePattern="Performance" --maxWorkers=1

      - name: Generate performance report
        run: |
          echo "## Performance Test Results" > performance-report.md
          echo "Generated on: $(date)" >> performance-report.md
          echo "Commit: ${{ github.sha }}" >> performance-report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: |
          cd tests/integration
          npm test -- --testNamePattern="Security" --maxWorkers=1

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3001'
          fail_action: false
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: report_html.html